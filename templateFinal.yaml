AWSTemplateFormatVersion: '2010-09-09'
Resources:

  # DynamoDB Table for Teams
  TeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Teams
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # DynamoDB Table for Events
  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Events
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt TeamsTable.Arn
                  - !GetAtt EventsTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  # Lambda Functions
  CreateTeamFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: create_team
      Handler: create_team.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'final-project-robodreams'
        S3Key: 'lambaFunctions/create_team.py.zip'
      Runtime: python3.8

  GetTeamFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get_team
      Handler: get_team.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'final-project-robodreams'
        S3Key: 'lambaFunctions/get_team.py.zip'
      Runtime: python3.8

  UpdateTeamFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: update_team
      Handler: update_team.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'final-project-robodreams'
        S3Key: 'lambaFunctions/update_team.py.zip'
      Runtime: python3.8

  CreateEventFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: create_event
      Handler: create_event.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'final-project-robodreams'
        S3Key: 'lambaFunctions/create_event.py.zip'
      Runtime: python3.8

  GetEventFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get_event
      Handler: get_event.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'final-project-robodreams'
        S3Key: 'lambaFunctions/get_event.py.zip'
      Runtime: python3.8

  UpdateEventFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: update_event
      Handler: update_event.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'final-project-robodreams'
        S3Key: 'lambaFunctions/update_event.py.zip'
      Runtime: python3.8

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "FinalProjectAPI"
      Description: "API for managing teams and events"

  # Resources (endpoints)
  TeamsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "teams"
      RestApiId: !Ref ApiGateway

  EventsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "events"
      RestApiId: !Ref ApiGateway

  # Methods
  TeamsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref TeamsResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTeamFunction.Arn}/invocations"

  TeamsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref TeamsResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTeamFunction.Arn}/invocations"

  TeamsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      ResourceId: !Ref TeamsResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTeamFunction.Arn}/invocations"

  EventsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref EventsResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateEventFunction.Arn}/invocations"

  EventsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref EventsResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEventFunction.Arn}/invocations"

  EventsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      ResourceId: !Ref EventsResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateEventFunction.Arn}/invocations"

  # Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TeamsPostMethod
      - TeamsGetMethod
      - TeamsPutMethod
      - EventsPostMethod
      - EventsGetMethod
      - EventsPutMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: "prod"

Outputs:
  ApiGatewayInvokeURL:
    Description: "API Gateway Invoke URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
